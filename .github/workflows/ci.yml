name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage flake8

    - name: Install SonarScanner
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-17-jre
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner-cli-5.0.1.3006-linux.zip
        sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
        echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

    - name: Run migrations
      env:
        DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb
        SECRET_KEY: testsecret
      run: |
        python src/manage.py migrate

    - name: Run linter
      run: flake8 src task_manager

    - name: Run tests
      env:
        DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb
        SECRET_KEY: testsecret
        DEBUG: "False"
      run: |
        python src/manage.py test task_manager --verbosity=2

    - name: Generate coverage report
      env:
        DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb
      run: |
        coverage run --source='.' src/manage.py test task_manager
        coverage xml -i

    - name: Run SonarScanner
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
          -Dsonar.sources=src,task_manager \
          -Dsonar.python.coverage.reportPaths=coverage.xml \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.tests=task_manager